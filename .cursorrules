# PortOps MVP - Правила для Cursor AI

## Архитектура проекта

Этот проект использует следующую архитектуру:
- **Frontend**: Next.js 15 (App Router, Server Components, Server Actions)
- **UI**: Tailwind CSS + shadcn/ui
- **Backend**: Supabase (PostgreSQL + RLS, Edge Functions, Storage)
- **Deploy**: Vercel (UI) + Supabase (Backend)

## Основные принципы

1. **Следуй архитектуре из документации**: Всегда обращайся к `docs/` для понимания структуры
2. **Используй Server Components**: Предпочитай Server Components для загрузки данных
3. **RLS безопасность**: Всегда учитывай Row Level Security при работе с данными
4. **TypeScript strict**: Используй строгую типизацию
5. **Никогда не хардкоди секреты**: Всегда читай из переменных окружения

## Структура файлов

```
portops/
├── apps/
│   └── web/                    # Next.js приложение
│       ├── app/               # App Router
│       ├── lib/               # Утилиты и клиенты
│       ├── components/        # UI компоненты
│       └── actions/           # Server Actions
├── packages/
│   └── shared/                # Общие пакеты
├── supabase/
│   └── functions/             # Edge Functions
└── docs/                      # Документация
```

## Правила кодирования

### Next.js 15
- Используй App Router (`app/` директория)
- Server Components для загрузки данных
- Server Actions для мутаций
- Route Handlers для API endpoints

### Supabase
- Используй `@supabase/ssr` для правильной работы с SSR
- Всегда проверяй RLS политики
- Используй service role key только на сервере

### UI/UX
- Используй shadcn/ui компоненты
- Tailwind CSS для стилизации
- Responsive дизайн
- Доступность (accessibility)

### Безопасность
- Никогда не экспортируй секреты в клиентский код
- Валидируй все входные данные
- Используй RLS для изоляции данных

## Тикеты и задачи

Всегда обращайся к `docs/TICKETS.md` для понимания текущих задач и их статуса. Следуй формату тикетов при создании новых функций.

## Документация

Основные документы:
- `docs/ROADMAP.md` - План развития и milestones
- `docs/DATABASE.md` - Схема базы данных
- `docs/API.md` - API документация
- `docs/OPERATIONS.md` - Операционные процедуры
- `docs/INGEST.md` - Документация по инжесту

## Команды

Основные команды для разработки:
- `pnpm dev` - запуск Next.js
- `pnpm sb:start` - запуск локального Supabase
- `pnpm db:studio` - открыть Supabase Studio
- `pnpm sb:functions:serve` - запуск Edge Functions

## Приоритеты

1. **Безопасность** - всегда на первом месте
2. **Производительность** - используй индексы и MV
3. **Надёжность** - обработка ошибок и валидация
4. **UX** - интуитивный интерфейс

## Стиль кода

- Используй TypeScript strict mode
- Компоненты должны быть маленькими и переиспользуемыми
- Используй meaningful имена переменных и функций
- Добавляй комментарии для сложной логики
- Следуй принципам SOLID

## Тестирование

- Unit тесты для парсеров и утилит
- E2E тесты для основных пользовательских сценариев
- Тестируй RLS политики
- Проверяй обработку ошибок

## Деплой

- Vercel для UI
- Supabase для базы данных и функций
- Автоматический деплой через GitHub Actions
- Мониторинг через Supabase Dashboard

## Мониторинг

- Логирование всех операций
- Метрики производительности
- Алерты при ошибках
- Регулярные проверки здоровья системы
